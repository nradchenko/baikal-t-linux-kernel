// SPDX-License-Identifier: GPL-2.0-only
/*
 * Copyright (C) 2022 BAIKAL ELECTRONICS, JSC
 *
 * Baikal-T1 generic platform device tree
 */

/dts-v1/;

#include <dt-bindings/interrupt-controller/irq.h>

#include "bt1.dtsi"

/ {
	model = "Baikal-T1 Generic Platform";
	compatible = "baikal,bt1";

	chosen {
		/*
		 * Note of having both EARLY_PRINTK and SERIAL_EARLYCON
		 * activated at the same time. If they both refer to the same
		 * device, you'll end up with duplicated log messages.
		 * Here by passing 'earlycon' to the kernel we'll activate it
		 * to parse the stdout-path property to find the early console
		 * device. System console will be then activated in accordance
		 * with it if 'console=' parameter isn't passed. Any of the
		 * following consoles are valid: ttyS{0,1}/uart{0,1} (which
		 * alias is serial{0,1}), early_fdc (CDMM-JTAG serial iface).
		 */
		bootargs = "console=ttyS0,115200n8 earlycon maxcpus=2";
		stdout-path = "serial0:115200n8";

		/* It's implied that the bootloader updates the initrd address */
		linux,initrd-start = <0 0>;
		linux,initrd-end   = <0 0>;
	};

	memory {
		/*
		 * Declare required low-memory and additional 256MB of high-
		 * memory, which due to the DW uMCTL2 controller specific setup
		 * nearly always exists as being remapped upper part of the
		 * first memory chip. Without low-level remapping that segment
		 * is hidden behind the MMIO region and isn't reachable.
		 * NOTE. For the reason of having MMIO above the very first
		 * 128MB of the low memory, the second 128MB of the physical
		 * memory is always unavailable as being hidden behind MMIO
		 * and non-remappable by DW uMCTL2.
		 */
		device_type = "memory";
		reg = <0 0x00000000 0 0x08000000>,
		      <0 0x20000000 0 0x10000000>;
	};

	/* Standard xGMAC/PCIe/SATA reference clocks setup */
	clocks {
		xgmac_ref_clk: clock-oscillator-xgmac {
			compatible = "fixed-clock";
			#clock-cells = <0>;
			clock-frequency  = <156250000>;
			clock-output-names = "xgmac156m";
		};

		pcie_ref_clk: clock-oscillator-pcie {
			compatible = "fixed-clock";
			#clock-cells = <0>;
			clock-frequency  = <100000000>;
			clock-output-names = "pcie100m";
		};

		sata_ref_clk: clock-oscillator-sata {
			compatible = "fixed-clock";
			#clock-cells = <0>;
			clock-frequency  = <100000000>;
			clock-output-names = "sata100m";
		};
	};
};

&l2 {
	status = "okay";
};

&i2c0 {
	status = "okay";
};

&int_rom {
	status = "okay";
};

&spi0 {
	num-cs = <1>;

	status = "okay";

	/*
	 * Most likely an SPI-nor flash will be always installed on each
	 * device with Baikal-T1 SoC on board. There is no just better
	 * alternative to boot a normal system on that CPU.
	 * Note Baikal-T1 is able to transparently access up to 16MB flash,
	 * so the system bootloader size can not exceed that limit, but an
	 * attached SPI-flash can as long as it supports 3bytes addressing
	 * of the lowest partition.
	 */
	boot_flash: flash@0 {
		compatible = "jedec,spi-nor";
		#address-cells = <1>;
		#size-cells = <1>;
		reg = <0>;

		spi-max-frequency = <25000000>;
		m25p,fast-read;
	};
};

&gpio0 {
	status = "okay";
};

&gpio1 {
	status = "okay";
};

&i2c1 {
	status = "okay";
};

&i2c2 {
	status = "okay";
};

&timer_dw0 {
	status = "okay";
};

&timer_dw1 {
	status = "okay";
};

&timer_dw2 {
	status = "okay";
};

&uart0 {
	status = "okay";
};

&uart1 {
	status = "okay";
};

&wdt {
	status = "okay";
};

&spi1 {
	num-cs = <4>;

	status = "okay";
};

&spi2 {
	num-cs = <4>;

	status = "okay";
};

&pvt {
	status = "okay";
};

&efuse {
	status = "okay";
};

&pcie {
	clocks = <&ccu_sys CCU_SYS_APB_CLK>,
		 <&ccu_axi CCU_AXI_PCIE_M_CLK>,
		 <&ccu_axi CCU_AXI_PCIE_S_CLK>,
		 <&pcie_ref_clk>;
	clock-names = "dbi", "mstr", "slv", "ref";


	status = "okay";
};

&sram {
	status = "okay";
};

&dma {
	status = "okay";
};

&mc {
	status = "okay";
};

&mc_phy {
	status = "okay";
};

&sata {
	clocks = <&ccu_sys CCU_SYS_APB_CLK>,
		 <&ccu_axi CCU_AXI_SATA_CLK>,
		 <&sata_ref_clk>;
	clock-names = "pclk", "aclk", "ref";

	status = "okay";
};

&sata0 {
	hba-port-cap = <HBA_PORT_FBSCP>;

	status = "okay";
};

&sata1 {
	hba-port-cap = <HBA_PORT_FBSCP>;

	status = "okay";
};

&xgmac_mi {
	status = "okay";
};

&xgmac_pcs {
	clocks = <&ccu_sys CCU_SYS_XGMAC_REF_CLK>,
		 <&xgmac_ref_clk>;
	clock-names = "core", "pad";
};

&xgmac {
	mac-address = [ 00 20 13 ba 1c a1 ];

	status = "okay";
};

&hwa {
	status = "okay";
};

&gmac0_mdio {
	reset-delay-us = <10000>;
	reset-post-delay-us = <30000>;

	/*
	 * We don't know actual PHY address on a generic device. Let the driver
	 * auto scan the MDIO bus looking for the IEEE 802.3 Clause 22
	 * compatible PHY.
	 */
	gmac0_phy: ethernet-phy {
		compatible = "ethernet-phy-ieee802.3-c22";
	};
};

&gmac0 {
	mac-address = [ 7a 72 6c 4a 7a 07 ];

	phy-handle = <&gmac0_phy>;

	status = "okay";
};

&gmac1_mdio {
	reset-delay-us = <10000>;
	reset-post-delay-us = <30000>;

	/*
	 * We don't know actual PHY address on a generic device. Let the driver
	 * auto scan the MDIO bus looking for the IEEE 802.3 Clause 22
	 * compatible PHY.
	 */
	gmac1_phy: ethernet-phy {
		compatible = "ethernet-phy-ieee802.3-c22";
	};
};

&gmac1 {
	mac-address = [ 7a 72 6c 4a 7b 07 ];

	phy-handle = <&gmac1_phy>;

	status = "okay";
};

&usb {
	status = "okay";
};
